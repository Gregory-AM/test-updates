name: Notify Discord on Release

on:
  release:
    types: [published]

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Release Info
        id: get_release_info
        run: |
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT
          echo "release_body=${{ github.event.release.body }}" >> $GITHUB_OUTPUT
          echo "release_url=${{ github.event.release.html_url }}" >> $GITHUB_OUTPUT
          echo "published_at=${{ github.event.release.published_at }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ github.event.release.prerelease }}" >> $GITHUB_OUTPUT

      - name: Clean release notes
        id: clean_body
        run: |
          BODY='${{ steps.get_release_info.outputs.release_body }}'
          # Escape JSON special characters and convert to JSON string
          CLEAN_BODY=$(echo "$BODY" | jq -Rs .)
          echo "clean_body=$CLEAN_BODY" >> $GITHUB_OUTPUT

      - name: Determine Update Type
        id: detect_type
        run: |
          tag="${{ steps.get_release_info.outputs.tag_name }}"
          is_prerelease="${{ steps.get_release_info.outputs.is_prerelease }}"
          version="${tag#v}"

          # Parse version components
          IFS='.-' read -ra PARTS <<< "$version"
          major="${PARTS[0]}"
          minor="${PARTS[1]}"
          patch="${PARTS[2]}"

          type="PATCH"

          if [[ "$tag" == "v3.0.0" ]]; then
            type="INITIAL"
          elif [[ "$is_prerelease" == "true" || "$version" == *"rc"* || "$version" == *"beta"* ]]; then
            type="PRERELEASE"
          else
            if [[ "$minor" == "0" && "$patch" == "0" ]]; then
              type="MAJOR"
            elif [[ "$patch" == "0" ]]; then
              type="MINOR"
            fi
          fi

          echo "type=$type" >> $GITHUB_OUTPUT

      - name: Create Discord Payload
        id: create_payload
        run: |
          RELEASE_URL="${{ steps.get_release_info.outputs.release_url }}"
          RELEASE_NOTES=${{ steps.clean_body.outputs.clean_body }}
          RELEASE_NAME="${{ steps.get_release_info.outputs.release_name }}"
          PUBLISHED_AT="${{ steps.get_release_info.outputs.published_at }}"
          UPDATE_TYPE="${{ steps.detect_type.outputs.type }}"

          if [[ "$UPDATE_TYPE" == "INITIAL" ]]; then
            cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "ðŸš€ INITIAL RELEASE - [Re]Structure v3.0.0",
                "description": "This is the initial release for the [Re]Structure plugin.",
                "color": 7308441,
                "footer": {"text": "Released"},
                "timestamp": "$PUBLISHED_AT",
                "url": "$RELEASE_URL",
                "fields": [
                  {
                    "name": "RELEASE NOTES:",
                    "value": $RELEASE_NOTES
                  }
                ]
              }
            ]
          }
          EOF
          elif [[ "$UPDATE_TYPE" == "PRERELEASE" ]]; then
            cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "ðŸ§ª PRE-RELEASE - $RELEASE_NAME",
                "description": "This release is for testing and bug hunting.\\n\\n**Do NOT use in main workspace!**\\n\\n[Report bugs](https://github.com/GregoryAM-SP/ReStructure-Plugin/issues).",
                "url": "$RELEASE_URL",
                "timestamp": "$PUBLISHED_AT",
                "color": 16760124,
                "footer": {"text": "Pre-release"},
                "fields": [
                  {
                    "name": "RELEASE NOTES:",
                    "value": $RELEASE_NOTES
                  }
                ]
              }
            ]
          }
          EOF
          elif [[ "$UPDATE_TYPE" == "MAJOR" ]]; then
            cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "ðŸŽ‰ MAJOR UPDATE - $RELEASE_NAME",
                "description": "## Major update\\n\\nThis is the latest stable release of **[Re]Structure**.",
                "url": "$RELEASE_URL",
                "timestamp": "$PUBLISHED_AT",
                "color": 7929683,
                "footer": {"text": "Major"},
                "fields": [
                  {
                    "name": "BUG REPORTING:",
                    "value": "[Report bugs](https://github.com/GregoryAM-SP/ReStructure-Plugin/issues)."
                  },
                  {
                    "name": "RELEASE NOTES:",
                    "value": $RELEASE_NOTES
                  }
                ]
              }
            ]
          }
          EOF
          elif [[ "$UPDATE_TYPE" == "MINOR" ]]; then
            cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "âœ¨ MINOR UPDATE - $RELEASE_NAME",
                "description": "## Minor update\\n\\nLatest stable release.",
                "url": "$RELEASE_URL",
                "timestamp": "$PUBLISHED_AT",
                "color": 7929683,
                "footer": {"text": "Minor"},
                "fields": [
                  {
                    "name": "RELEASE NOTES:",
                    "value": $RELEASE_NOTES
                  }
                ]
              }
            ]
          }
          EOF
          else
            cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "ðŸ”§ PATCH UPDATE - $RELEASE_NAME",
                "description": "Patch update released.",
                "url": "$RELEASE_URL",
                "timestamp": "$PUBLISHED_AT",
                "color": 3323461,
                "footer": {"text": "Patch"},
                "fields": [
                  {
                    "name": "RELEASE NOTES:",
                    "value": $RELEASE_NOTES
                  }
                ]
              }
            ]
          }
          EOF
          fi

          echo "payload_path=payload.json" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        uses: fjogeleit/http-request-action@v1.14.1
        with:
          url: ${{ secrets.DISCORD_WEBHOOK }}
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          file: ${{ steps.create_payload.outputs.payload_path }}
